\name{Class design and accessors}
\alias{design}
\alias{undesign}
\alias{redesign}
\alias{[.design}
\alias{print.design}
\alias{summary.design}
\alias{desnum}
\alias{desnum<-}
\alias{run.order}
\alias{run.order<-}
\alias{design.info}
\alias{design.info<-}
\alias{factor.names}
\alias{factor.names<-}
\alias{response.names}
\alias{response.names<-}
\alias{ord}

%- Also NEED an '\alias' for EACH other topic documented here.
\title{ Class design and its accessor functions }
\description{
  Convenience functions to quickly access and modify attributes of data frames of the class 
  design that have been generated by functions FrF2, pb or fac.design
}
\usage{
design
undesign(design)
redesign(design, undesigned)
desnum(design)
`desnum<-`(design, value)
run.order(design)
`run.order<-`(design, value)
design.info(design)
`design.info<-`(design, value)
factor.names(design)
`factor.names<-`(design, value)
response.names(design)
`response.names<-`(design, value)
\method{[}{design}(x, i, j, drop.attr = TRUE, drop = FALSE)
\method{print}{design}(x, show.order=design.info(x)$type \%in\% 
       c("FrF2.blocked", "FrF2.splitplot", "crossed", 
         "paramwide", "FrF2.paramwide", "param", "FrF2.param")  | 
       design.info(x)$replications>1, ...)
\method{summary}{design}(object, ...)
ord(matrix, decreasing=FALSE)
}
\arguments{
  \item{design}{ data frame of S3 class \code{design}. For the structures of design 
       objects, refer to the details section and to the value sections of the 
       functions that create them. }
  \item{undesigned}{an object that is currently not a design but could be (e.g. obtained by applying function \code{undesign}}
  \item{x}{ data frame of S3 class \code{design}, like argument \code{design} }
  \item{value}{ an appropriate replacement value:\cr
      a numeric version of the design matrix for function \code{desnum} (usage not encouraged for non-experts!)\cr
      a run order data frame for function \code{run.order} (usage not encouraged for non-experts!)\cr
      a list with appropriate design information for function \code{design.info} (usage not encouraged for non-experts!)\cr
      for function \code{factor.names} a character vector of new factor names (levels remain unchanged) 
      or a named list of level combinations for the factors, 
      like \code{factor.names} in function \code{\link{fac.design}} \cr
      for function \code{response.names} a character vector of response names referring to variables 
      which are already available in \code{design}
      }
  \item{i}{ indices for subsetting rows }
  \item{j}{ indices for subsetting columns }
  \item{drop.attr}{ logical, controls whether or not attributes are dropped; 
       if TRUE, the result is no longer of class \code{design}, and all special design attributes are dropped;
       otherwise, the design attributes are adjusted to reflect the subsetting result}
  \item{drop}{ logical that controls dropping of dimensions in the Extract function for 
       data.frame objects, which is called by the method for class design}
  \item{show.order}{ logical; if TRUE, the design is printed with run order information; 
        default is TRUE for design types for which this information is helpful, FALSE otherwise }
  \item{\dots}{ further arguments to functions \code{print} or \code{summary}  }
  \item{object}{ data frame of S3 class \code{design}, like argument \code{design} }
  \item{matrix}{matrix, data frame or also object of class design that is to be ordered column by column}
  \item{decreasing}{logical, indicates whether decreasing order or not (increasing is default)}
}
\details{
    Items of class \code{design} are data frames with attributes. They are generated 
    by various functions that create experimental designs, currently by 
    \code{FrF2}, \code{pb}, \code{\link{oa.design}} \code{\link{fac.design}}, and 
    by various utility functions for designs like 
    the above extractor function for class \code{design} or \code{\link{fix.design}}.
    
    The data frame itself always contains the design in uncoded form (for all currently 
    implemented design generation functions, these are factors; for future functions for 
    quantitative factors, this may be different). 
    Generally, its attributes are \code{desnum}, 
    \code{run.order}, and \code{design.info}. Attribute \code{desnum} contains 
    a numeric coded version of the design, attribute \code{run.order} a data frame 
    with run order information (standard order, randomized order, order with replication info), 
    and the details of \code{design.info} partly depend on the type of design. 
    
    \code{design.info} generally is a list with first element \code{type}, 
    further info on the design, 
    and some options of the design call regarding randomization and replication. 
    For almost all design types, elements include 
    \describe{
    \item{nruns}{number of runs (not adjusted for replications)}
    \item{nfactors}{number of factors}
    \item{factor.names}{named list, as can be handed to function \code{\link{oa.design}}}
    \item{replications}{the integer number of replications (1=unreplicated)} 
    \item{repeat.only}{logical indicating whether replications are only repeat runs but not 
         truly replicated}
    \item{randomize}{logical indicating whether the experiment was randomized} 
    \item{seed}{the integer seed handed to the function call by the user }
    \item{response.names}{in the presence of response data only; 
        the character vector identifying response columns in the data frame} 
    \item{creator}{contains the call or 
    (in the future) the list of menu settings within the currently developed 
    package \pkg{RcmdrPlugin.DoE} that led to creation of the design.}
    }
    
    For some design types, notably designs of types starting with \dQuote{FrF2}, 
    there can be substantial additional information available from the \code{design.info} 
    attribute in specialized situations. Detailed information on the structure of \code{design.info} 
    can be found in the value sections of the respective functions.
    
    Function \code{undesign} removes all design-related attributes from a class design 
    object; this may be necessary for making some independent code work on design objects. 
    (For example, function \code{\link[stats]{reshape}} from package \pkg{stats} does not 
    work on a class design object, presumably because of the specific extractor method for class design.) 
    Occasionally, one may also want 
    to reconnect a processed undesigned object to its design properties. This is the purpose of 
    function \code{redesign}.
    
    The functions \code{desnum}, \code{run.order}, and \code{design.info} extract 
    the respective attribute, i.e. e.g. function design.info 
    extracts the design information for the design. The corresponding assignment 
    functions should only be used by very experienced users, as they may 
    mess up things badly if they are used naively .
    
    The functions \code{factor.names} and \code{response.names} extract the 
    respective elements of the \code{design.info} attribute. The corresponding assignment 
    functions allow to change factor names and/or factor codes and to exclude or include 
    a numeric variable from the list of responses that are recognized as such by analysis 
    procudures. Note that the \code{response.names} function is not directly able to 
    add new responses from outside the data frame \code{design}. This is what the 
    function \code{\link{add.response}} is for.
    
    The extractor method subsets the design, taking care of the attributes accordingly. 
    Subsetting can also handle replication in a limited way, although this is not first 
    choice. Repeated measurements can be added to a design that has no proper replications, 
    and proper replications can be added to a design that has no repeated measurements. 
    
    The methods for \code{print} or \code{summary} provide design-specific information - 
    especially the \code{summary} method will develop further. If a standard data frame summary 
    is desired, explicitly use function \code{summary.data.frame} instead of \code{summary}.
}
\value{
    \item{desnum}{returns a numeric matrix, 
         the corresponding replacement function modifies a class design object }
    \item{run.order}{returns a 3-column data frame with standard and actual run order 
         as well as a run order with replication identifiers attached; 
         the corresponding replacement function modifies a class design object }
    \item{design.info}{returns the design.info attribute of the design; 
         the corresponding replacement function modifies a class design object }
    \item{factor.names}{returns a named list the names of which are the names of the 
         treatment factors of the design while the list elements are the vectors of levels 
         for each factor; 
         the corresponding replacement function modifies a class design object 
         in order to rename factors and/or change labels for factor levels}
    \item{response.names}{returns a character vector of response names that 
         (names of numeric variables within the data frame \code{design} 
         that are to be treated as response variables ) ; 
         the corresponding replacement function modifies the design }
    \item{extractor}{The extractor function returns a class design object with modified attributes 
        or a data frame without special attributes, depending on the situation. 
        
        If \code{j} is given, the function always returns a data frame without 
        special attributes, even if \code{drop.attr=FALSE} or \code{j=1:ncol(design)}.\cr
        If only \code{i} is given, 
        the default option \code{drop.attr=TRUE} also returns a 
        data frame without attributes.\cr
        Exception: Even for \code{drop.attr=TRUE}, if \code{i} is a permutation of 
        the row numbers or a logical vector with all elements TRUE, 
        the attributes are preserved, and attributes \code{run.order} 
        and \code{desnum} are reordered along with the design, if necessary.\cr
        If \code{drop.attr=FALSE} and \code{j} is empty, 
        the function returns an object of class design with rows of attributes \code{run.order} 
        and \code{desnum} selected in line with those of the design itself. 
        In this case, the new \code{design.info} attribute is a list with entries 
        \itemize{
        \item{type}{resolving to \dQuote{subset of design}, }
        \item{subset.rows}{ a numeric or logical vector with the selected rows, and}
        \item{orig.design.info}{ which contains the original design.info attribute.}
        }}
    \item{ord}{returns an index vector that orders the matrix or data frame; 
        for example, \code{design[ord(design),]} orders the design in increasing order with respect to the first,
        then the second etc. factor.}
    The print and summary methods are called for their side effects and return \code{NULL}.
}
\author{ Ulrike Groemping }
\note{ The package is currently subject to intensive development; most key functionality is now included. 
Some changes to input and output structures may still occur.}
\seealso{ See also the following functions known to produce objects of class 
    \code{design}: \code{FrF2}, \code{pb}, \code{\link{fac.design}}, \code{\link{oa.design}}} 
\examples{
oa12 <- oa.design(nlevels=c(2,2,6))
#### Examples for extractor function
  ## subsetting to half the runs drops all attributes per default
  oa12[1:6,]
  ## keep the attributes (usually not reasonable, but ...)
  oa12[1:6, drop.attr=FALSE]
  ## reshuffling a design
  ## (re-)randomize
  oa12[sample(12),]
  ## add repeated measurements
  oa12[rep(1:12,each=3),]
  ## add a proper replication 
  ## (does not work for blocked designs)
  oa12[c(sample(12),sample(12)),]
  ## subsetting and rbinding to loose also contrasts of factors
  str(rbind(oa12[1:2,],oa12[3:12]))
  ## keeping all non-design-related attributes like the contrasts
  str(undesign(oa12))

#### Examples for factor.names and response.names
  factor.names(oa12)
  ## rename factors
  factor.names(oa12) <- c("First.Factor", "Second.Factor", "Third.Factor")
  ## rename factors and relabel levels of first two factors
  namen <- c(rep(list(c("current","new")),2),list(""))
  names(namen) <- c("First.Factor", "Second.Factor", "Third.Factor")
  factor.names(oa12) <- namen
  oa12

  ## add a few variables to oa12
  responses <- cbind(temp=sample(23:34),y1=rexp(12),y2=runif(12))
  oa12 <- add.response(oa12, responses)
  response.names(oa12)
  ## temp (for temperature) is not meant to be a response 
  ## --> drop it from responselist but not from data
  response.names(oa12) <- c("y1","y2")

## undesign and redesign
  u.oa12 <- undesign(oa12)
  u.oa12$new <- rnorm(12)
  r.oa12 <- redesign(oa12, u.oa12)
## make known that new is also a respons
  response.names(r.oa12) <- c(response.names(r.oa12), "new") 
## look at design-specific summary
  summary(r.oa12)
## look at data frame style summary instead
  summary.data.frame(r.oa12)
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ array }
\keyword{ design }% __ONLY ONE__ keyword per line
